#!/usr/bin/env perl6

use MoarVM::Remote;
use JSON::Fast;

sub print-table(@chunks) {
    my $num-cols = [max] @chunks>>.value.map([max] *>>.elems).flat;
    my @col-sizes = 0 xx $num-cols;
    for @chunks {
        for .value {
            @col-sizes >>[max]=<< $_>>.chars
        }
    }
    for @chunks -> $chunk {
        say "";
        say $chunk.key;
        for @($chunk.value) -> $line {
            print "    ";
            for @$line Z @col-sizes -> ($text, $fieldwidth) {
                print $text.&pad($fieldwidth + 2)
            }
            print "\n";
        }
    }
}

sub pad($str, $size) {
    my $result = " " x $size;
    $result.substr-rw(0..$str.chars) = $str;
    $result;
}

sub MAIN(Int $port) {
    my $remote = await MoarVM::Remote.connect($port);
    say "success!";

    $remote.events.tap({ say "Got event: "; .say });

    while prompt("> ") -> $_ {
        when /:s execution / {
            say (await $remote.is-execution-suspended()) ?? "Execution suspended" !! "Execution not suspended";
        }
        when /:s sus[p[e[nd?]?]?]? (\d+)? / {
            say "trying to suspend thread $0" with $0;
            say "trying to suspend all threads" without $0;
            say await $remote.suspend($0 ?? $0.Int.self !! Whatever);
        }
        when /:s res[u[m[e?]?]?]? (\d+)? / {
            say "trying to resume thread $0" with $0;
            say "trying to resume all threads" without $0;
            say await $remote.resume($0 ?? $0.Int.self !! Whatever);
        }
        when /:s dump (\d+) / {
            say (await $remote.dump($0.Int.self)).&to-json(:pretty);
        }
        when / tl / {
            say (await $remote.threads-list).&to-json(:pretty);
        }
        when /:s ctxhandle (\d+) (\d+) / {
            say (await $remote.context-handle($0.Int.self, $1.Int.self)).&to-json(:pretty);
        }
        when /:s caller (\d+) / {
            my $result = await $remote.caller-context-handle($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s outer (\d+) / {
            my $result = $remote.outer-context-handle($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s coderef (\d+) (\d+) / {
            my $result = await $remote.coderef-handle($0.Int.self, $1.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s all lex[icals]? (\d+) / {
            # convenience: grab all lexicals on the stack
            my @allframes = (await $remote.dump($0.Int.self));
            my $framecount = +@allframes;

            my @chunks = gather for (^$framecount).reverse {
                my $handle = await $remote.context-handle($0.Int.self, $_);
                my $lexicals = (await $remote.lexicals($handle));

                my $framedetails = "$_<name> ($_<file>:$_<line>)" given @allframes[$_];

                take "Frame $_ - $framedetails - handle: $handle" =>
                    (gather for $lexicals.kv -> $n, $/ {
                        my @attributes = flat "concrete" xx ?$<concrete>,
                            "container" xx ?$<container>,
                            "value: {$<value>//""}" xx ($<value>:exists);

                        take $<handle> // "", $<type> || $<kind>, $n, @attributes.join(", ");
                    }).cache
            };
            print-table(@chunks);
        }
        when /:s lexicals (\d+) / {
            my $result = await $remote.lexicals($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s attributes (\d+) / {
            my $result = await $remote.attributes($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s clearbp \"(.*?)\" (\d+) / {
            my $result = await $remote.clear-breakpoints($0.Str, $1.Int);
            say $result.&to-json(:pretty);
        }
        when /:s [breakpoint|bp] \"(.*?)\" (\d+) (\d?) (\d?) / {
            my $result = await $remote.breakpoint($0.Str, $1.Int, suspend => so ($2 && $2.Int), stacktrace => so ($3 && $3.Int));
            say $result.&to-json(:pretty);
        }
        default {
            say "oh no! don't know what to do with $_";

            say "supported commands:";
            say q:to/CMDS/;
                /:s sus[p[e[nd?]?]?]? (\d+)? /
                /:s res[u[m[e?]?]?]? (\d+)? /
                /:s dump (\d+) /
                / tl /
                /:s ctxhandle (\d+) (\d+) /
                /:s caller (\d+) /
                /:s outer (\d+) /
                /:s coderef (\d+) (\d+) /
                /:s lexicals (\d+) /
                /:s attributes (\d+) /
                /:s [breakpoint|bp] \"(.*?)\" (\d+) (\d?) (\d?) /
                /:s clearbp \"(.*?)\" (\d+) /
                CMDS
        }
        CATCH {
            default {
                .say;
            }
        }
    }
}
