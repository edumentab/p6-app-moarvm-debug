#!/usr/bin/env perl6

use MoarVM::Remote;
use App::MoarVM::Debug::Formatter;
use App::MoarVM::Debug::Breakpoints;
use JSON::Fast;


multi sub boring-metadata($, $) {
    False
}

multi sub boring-metadata($_ where *.starts-with("p6opaque"), $v) {
    if .starts-with("p6opaque_unbox") or .ends-with("s_delegate") {
        return so $v == -1
    }
    False
}

sub MAIN(Int $port) {
    note "Welcome to the MoarVM Remote Debugger";
    note "";
    note "For best results, please run this program inside rlwrap";
    note "";
    note "Connecting to MoarVM remote on localhost port $port";
    my $remote = await MoarVM::Remote.connect($port);
    note "success!";

    my %interesting-events;
    my Lock $events-lock .= new;

    $remote.events.tap({
        $events-lock.protect: {
        if %interesting-events{.<id>}:exists {
            if %interesting-events{.<id>}($_) eq "delete" {
                %interesting-events{.<id>}:delete
            }
        } else {
            say "Got event: "; .say
        }
        Nil;
    }
    });

    my %abbreviated;
    my %reverse-abbreviated;
    my $abbreviate-length = 70;

    sub print-table(@chunks) {
        MoarVM::Remote::CLI::Formatter::print-table(@chunks, :%abbreviated, :%reverse-abbreviated, :$abbreviate-length);
    }

    my @last-command-handles;

    my $last-command;

    my $assumed-thread;

    while (my $input = prompt("> ")) !=== Any {
        $_ = $input;
        if m/^$/ {
            $_ = $last-command;
        } else {
            $last-command = $_;
        }
        when /:s execution / {
            say (await $remote.is-execution-suspended()) ?? "Execution suspended" !! "Execution not suspended";
        }
        when /:s sus[p[e[nd?]?]?]? (\d+)? / {
            say "trying to suspend thread $0" with $0;
            say "trying to suspend all threads" without $0;
            say await $remote.suspend($0 ?? $0.Int.self !! Whatever);
        }
        when /:s res[u[m[e?]?]?]? (\d+)? / {
            say "trying to resume thread $0" with $0;
            say "trying to resume all threads" without $0;
            say await $remote.resume($0 ?? $0.Int.self !! Whatever);
        }
        when /:s [dump|bt|backtrace] [(\d+)||<?{ defined $assumed-thread }>||<!>] / {
            my $thread = $0 ?? $0.Int.self !! $assumed-thread;
            my @frames := await $remote.dump($thread);
            my @table = "Stack trace of thread &bold($thread)" => format-backtrace(@frames);
            print-table @table;
        }
        when / [tl|threads] / {
            my $result = await $remote.threads-list;
            my @table = "Threads list" => gather {
                take ["thread", "suspended", "native id", "num locks", "app lifetime?"];
                take [bold(.<thread>), .<suspended>, .<native_id>.fmt("0x%x"), .<num_locks>, .<app_lifetime>] for $result.list.sort(*.<thread>);
            }.cache;
            print-table @table;
        }
        when /:s [ctxhandle|[call|stack]frame] [(\d+)||<?{ defined $assumed-thread }>||<!>] (\d+) / {
            my $thread = $0 ?? $0.Int.self !! $assumed-thread;
            say (await $remote.context-handle($thread, $1.Int.self)).&to-json(:pretty);
        }
        when /:s caller (\d+) / {
            my $result = await $remote.caller-context-handle($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s outer (\d+) / {
            my $result = $remote.outer-context-handle($0.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s coderef [(\d+)||<?{ defined $assumed-thread }>||<!>] (\d+) / {
            my $thread = $0 ?? $0.Int.self !! $assumed-thread;
            my $result = await $remote.coderef-handle($thread, $1.Int.self);
            say $result.&to-json(:pretty);
        }
        when /:s all lex[icals]? [(\d+)||<?{ defined $assumed-thread }>||<!>]/ {
            my $thread = $0 ?? $0.Int.self !! $assumed-thread;
            # convenience: grab all lexicals on the stack
            my @allframes = (await $remote.dump($thread));
            my $framecount = +@allframes;
            my @frame-handles;
            my @all-lexicals;

            @last-command-handles = Empty;

            for (^$framecount).reverse {
                my $handle = await $remote.context-handle($thread, $_);
                my $lexicals = (await $remote.lexicals($handle));

                @last-command-handles.push($handle) if $handle;

                @frame-handles[$_] = $handle;
                @all-lexicals[$_] = $lexicals;
            };

            # Check if any handles want to be replaced by an earlier handle,
            # if they refer to the same thing.

            my @all-handles = |@frame-handles;
            @all-handles.append($_.>>.<handle>.values.grep(*.so)) for @all-lexicals;

            my (@classes, %to-replace, @to-forget);
            try {
                @classes = await $remote.equivalences(@all-handles);
                %to-replace = classes-to-renaming(@classes);
                @to-forget = %to-replace.keys;
            }

            my $forget-promise = $remote.release-handles(@to-forget) if @to-forget;

            my @chunks = gather for (^$framecount).reverse {
                my $handle = @frame-handles[$_];
                my $lexicals = @all-lexicals[$_];

                my $framedetails = "$_<name> ($_<file>:$_<line>)" given @allframes[$_];
                take "Frame $_ - $framedetails - handle: &bold($handle)" =>
                        format-lexicals-for-frame($lexicals,
                            handles-seen => @last-command-handles,
                            handle-renaming => %to-replace);
            }
            print-table(@chunks);

            await $_ with $forget-promise;

            say "";
            say "call 'release all' to free these &bold(@last-command-handles.elems()) handles";
        }
        when /:s lex[icals]? (\d+) / {
            @last-command-handles = Empty;

            my $result = await $remote.lexicals($0.Int.self);
            my @table = "Lexicals of handle &bold($0.Int)" => format-lexicals-for-frame($result, handles-seen => @last-command-handles);
            print-table @table;
        }
        when /:s meta[data]? (\d+) / {
            my $result = await $remote.object-metadata($0.Int.self);
            my @table = "Metadata of handle &bold($0.Int)" =>
                gather {
                    my @features =
                        flat "positional"  xx ?$result<pos_features>,
                             "associative" xx ?$result<ass_features>,
                             "attributes"  xx ?$result<attr_features>;
                    take ["Features", @features.join(", ") || "none"];
                    take ["Size", ($result<size> // 0) ~ " + unmanaged: " ~ ($result<unmanaged_size> // 0)];
                    for $result.list.sort(*.key) {
                        next if .key eq any <pos_features ass_features attr_features size unmanaged_size>;
                        next if boring-metadata(.key, .value);
                        if .value ~~ Positional {
                            take [.key, .value.join(", ")];
                        } else {
                            take [.key, .value // "-"];
                        }
                    }
                }.cache;
            print-table @table;
        }
        when /:s attr[ibute]?s (\d+) / {
            my $result = await $remote.attributes($0.Int.self);
            my %by-class = $result.categorize(*.<class>);
            my @table = gather for %by-class {
                take "From class $_.key()" =>
                    gather for @($_.value) {
                        my @attributes = format-attributes($_);

                        take (bold(.<handle> // ""), (.<kind> eq "obj" ?? .<type> !! .<kind>), .<name>, @attributes.join(", "))
                    }.cache;
                }.cache;
            say "Attributes for handle &bold($0.Int)";
            print-table(@table);
        }
        when /:s pos[itionals]? (\d+) / {
            my $result = await $remote.object-positionals($0.Int.self);
            my @table = "Positionals in handle &bold($0.Int)" =>
                gather {
                    my $cnt = $result<start>;
                    if $result<kind> eq "obj" {
                        @last-command-handles = Empty;
                        for $result<contents>.list {
                            my @attributes = format-attributes($_);
                            @last-command-handles.push($_<handle>) if $_<handle>;
                            take [$cnt++, bold($_<handle>), $_<type>, @attributes.join(", ")];
                        }
                    } else {
                        for $result<contents>.list {
                            take [$cnt++, $_];
                        }
                    }
                }.cache;
            print-table(@table);
        }
        when /:s assoc[iatives]? (\d+) / {
            my $result = await $remote.object-associatives($0.Int.self);
            my @table = "Associatives in handle &bold($0.Int)" =>
                gather {
                    if $result<kind> eq "obj" {
                        @last-command-handles = Empty;
                        for $result<contents>.list {
                            my @attributes = format-attributes(.value);
                            @last-command-handles.push(.value<handle>) if .value<handle>;
                            take [&bold(.value<handle>), .key, .value<type>, @attributes.join(", ")];
                        }
                    } else {
                        take ["NYI"];
                    }
                }.cache;
            print-table(@table);
        }
        when /:s clearbp \"(.*?)\" (\d+) / {
            my $result = await $remote.clear-breakpoints($0.Str, $1.Int);
            say $result.&to-json(:pretty);
        }
        when /:s [breakpoint|bp][":"|<.ws>]\"(.*?)\" (\d+) (\d?) (\d?) / {
            my $result = await $remote.breakpoint($0.Str, $1.Int, suspend => so ($2 && $2.Int), stacktrace => so ($3 && $3.Int));
            my $file = $0.Str;
            my $line = $result<line>;
            output-breakpoint-notifications($file, $line, $_) with $result<notifications>;
        }
        when /:s release[handles]? (\d+)+ % \s+/ {
            my $result = await $remote.release-handles($0>>.Int);
            say $result.&to-json(:pretty);
        }
        when /:s release all [handles]? [keep (\d+)+ % \s+]?/ {
            my @free = (@last-command-handles (-) $0.List>>.Int).keys;
            say "releasing @free.elems() handles{ " keeping $0.List.elems()" if $0 }";
            my $result = await $remote.release-handles(@free);
            @last-command-handles = Empty;
        }
        when /:s assume thread (\d+) / {
            say "Going to assume thread $0.Int() for further commands";
            $assumed-thread = $0.Int();
        }
        when /:s s[tep]? (into|over|out)? [(\d+)||<?{ defined $assumed-thread }>||<!>] / {
            my $thread = $1 ?? $1.Int.self !! $assumed-thread;
            $events-lock.protect: {
                my $result = await do
                    if    !$0.defined or $0 eq "into"
                                       { $remote.step($thread, :into) }
                    elsif $0 eq "over" { $remote.step($thread, :over) }
                    elsif $0 eq "out"  { $remote.step($thread, :out) };
                %interesting-events{$result} = -> $event {
                    my @frames := $event<frames>;
                    my @table = "Stack trace of thread &bold($event<thread>)" => format-backtrace(@frames);
                    print-table @table;
                    "delete";
                }
            }
        }
        when /:s assume no thread / {
            say "Not going to assume any thread for further commands";
            $assumed-thread = Any;
        }
        when /:s abbrev (.*) / {
            say my $header = "Contents of entry $0.Str():";
            say "=" x $header.chars;
            say %abbreviated{$0.Str};
            my $footer = "End of Contents of entry $0.Str()";
            say "=" x $footer.chars;
            say $footer;
        }
        when /:s debug [(on|off)]?/ {
            with $0 {
                $remote.debug = $0.Str eq "on";
                say "debug output is now &bold($0.Str)";
            }
            else {
                say "debug output is currently &bold($remote.debug ?? "on" !! "off")";
            }
        }
        when /:s color [(on|off)]?/ {
            with $0 {
                wants-color() = $0.Str eq "on";
                say "colored output is now &bold($0.Str)";
            }
            else {
                say "colored output is currently &bold(wants-color() ?? "on" !! "off")";
                say "(but color is not available; install Terminal::ANSIColor maybe?)" unless has-color;
            }
        }
        default {
            say "oh no! don't know what to do with $_\n" if $_;

            say qq:to/CMDS/;
                Supported commands:

                &bold("dump") [thread number]
                    Print a stacktrace for the given thread.
                    Synonyms: &bold("bt")

                &bold("suspend") [thread number]
                &bold("resume")  [thread number]
                    Suspend or resume a thread, or all thread if no thread number is passed.

                &bold("step") into [thread number]
                    Continue running code on the given thread until a different source
                    line is reached.

                &bold("step over") [thread number]
                    Continue running code on the given thread until a different source
                    line in the same frame, or the current frame is left.

                &bold("step out") [handle (MVMContext)] [thread number]
                    Continue running code on the given thread until the given
                    frame is reached. To use this for stepping out, get a
                    ctxhandle for the frame you consider "out".

                &bold("tl")
                    Output a list of all threads and their status.
                    Synonyms: &bold("threads")

                &bold("ctxhandle") [thread number] [frame number]
                    Retrieve a handle for a frame (MVMContext) on the thread's stack.
                    Synonyms: &bold("frame")

                &bold("caller") [handle (MVMContext)]
                    Retrieve a handle for a frame's caller frame (MVMContext)

                &bold("outer") [handle (MVMContext)]
                    Retrieve a handle for a frame's outer frame (MVMContext)

                &bold("coderef") [thread number] [frame number]
                    Retrieve a handle for the code object (MVMCode) for a frame on a thread's stack.

                &bold("lexicals") [handle (MVMContext)]
                    Retrieve a list of lexicals and handlers for any object lexicals for a given frame.
                    Synonyms: &bold("lex")

                &bold("all lexicals") [thread number]
                    Retrieve a list of lexicals &bold("all") frames of a given thread.
                    Synonyms: &bold("lex")

                &bold("metadata") [handle (MVMObject)]
                    Retrieve a bunch of metadata about an object.
                    Synonyms: &bold("meta")

                &bold("attributes") [handle (MVMObject)]
                    Retrieve a list of all attributes an object has, along with handles for any object values.
                    Synonyms: &bold("attrs")

                &bold("positionals") [handle (MVMObject)]
                    Retrieve the contents of an object that has positional properties, like an array.
                    Synonyms: &bold("pos")

                &bold("associatives") [handle (MVMObject)]
                    Retrieve the contents of an object that has associative properties, like a hash.
                    Synonyms: &bold("assoc")

                &bold("release") [handle handle ...]
                    Releases handles, so the corresponding objects can be garbage collected.

                &bold("release") all [keep [handle handle ...]]
                    Release all handles allocated by the previous command, optionally keeping
                    the specified handles for further use.

                &bold("[breakpoint|bp]") "[file path]" [line number] [suspend]? [stacktrace]?
                    Sets a breakpoint for a given filename and line number.
                    If suspend is 1, execution of the thread that hit it will stop.
                    If stacktrace is 1, every hit will send a stack trace along with it.

                &bold("clearbp") "[file path]" [line number]
                    Clear any breakpoints for a given filename and line number.

                &bold("assume thread") [thread number]
                    If you don't pass a thread number in future commands, this one will be used.

                &bold("assume no thread")
                    Resets the thread selection.

                &bold("abbrev") [abbrev-key]
                    Display the full output for any abbreviated field.

                &bold("debug") [on|off]
                    Turns debugging information on or off, or display whether it's on or off.

                &bold("color") [on|off]
                    Turn ANSI Colors on or of or display whether it's on or off.

                CMDS
        }
        CATCH {
            default {
                .say;
            }
        }
    }
}
